# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/faraday/all/faraday.rbi
#
# faraday-1.0.1

module Faraday
end
module Faraday::Utils
  def URI(url); end
  def build_nested_query(params); end
  def build_query(params); end
  def deep_merge!(target, hash); end
  def deep_merge(source, hash); end
  def default_params_encoder; end
  def default_space_encoding; end
  def default_uri_parser; end
  def default_uri_parser=(parser); end
  def escape(str); end
  def normalize_path(url); end
  def parse_nested_query(query); end
  def parse_query(query); end
  def self.URI(url); end
  def self.build_nested_query(params); end
  def self.build_query(params); end
  def self.deep_merge!(target, hash); end
  def self.deep_merge(source, hash); end
  def self.default_params_encoder; end
  def self.default_params_encoder=(arg0); end
  def self.default_space_encoding; end
  def self.default_space_encoding=(arg0); end
  def self.default_uri_parser; end
  def self.default_uri_parser=(parser); end
  def self.escape(str); end
  def self.normalize_path(url); end
  def self.parse_nested_query(query); end
  def self.parse_query(query); end
  def self.sort_query_params(query); end
  def self.unescape(str); end
  def sort_query_params(query); end
  def unescape(str); end
end
class Faraday::Options < Struct
  def [](key); end
  def clear; end
  def deep_dup; end
  def delete(key); end
  def each; end
  def each_key; end
  def each_value; end
  def empty?; end
  def fetch(key, *args); end
  def has_key?(key); end
  def has_value?(value); end
  def inspect; end
  def key?(key); end
  def keys; end
  def merge!(other); end
  def merge(other); end
  def self.attribute_options; end
  def self.fetch_error_class; end
  def self.from(value); end
  def self.inherited(subclass); end
  def self.memoized(key, &block); end
  def self.memoized_attributes; end
  def self.options(mapping); end
  def self.options_for(key); end
  def symbolized_key_set; end
  def to_hash; end
  def update(obj); end
  def value?(value); end
  def values_at(*keys); end
end
class Faraday::Connection
  def adapter(*args, &block); end
  def app(*args, &block); end
  def authorization(type, token); end
  def basic_auth(login, pass); end
  def build(*args, &block); end
  def build_exclusive_url(url = nil, params = nil, params_encoder = nil); end
  def build_request(method); end
  def build_url(url = nil, extra_params = nil); end
  def builder; end
  def close; end
  def default_parallel_manager; end
  def default_parallel_manager=(arg0); end
  def delete(url = nil, params = nil, headers = nil); end
  def dup; end
  def find_default_proxy; end
  def get(url = nil, params = nil, headers = nil); end
  def head(url = nil, params = nil, headers = nil); end
  def headers; end
  def headers=(hash); end
  def host(*args, &block); end
  def host=(*args, &block); end
  def in_parallel(manager = nil); end
  def in_parallel?; end
  def initialize(url = nil, options = nil); end
  def initialize_proxy(url, options); end
  def options(*args); end
  def parallel_manager; end
  def params; end
  def params=(hash); end
  def patch(url = nil, body = nil, headers = nil, &block); end
  def path_prefix(*args, &block); end
  def path_prefix=(value); end
  def port(*args, &block); end
  def port=(*args, &block); end
  def post(url = nil, body = nil, headers = nil, &block); end
  def proxy; end
  def proxy=(new_value); end
  def proxy_for_request(url); end
  def proxy_from_env(url); end
  def put(url = nil, body = nil, headers = nil, &block); end
  def request(*args, &block); end
  def response(*args, &block); end
  def run_request(method, url, body, headers); end
  def scheme(*args, &block); end
  def scheme=(*args, &block); end
  def set_authorization_header(header_type, *args); end
  def ssl; end
  def support_parallel?(adapter); end
  def token_auth(token, options = nil); end
  def trace(url = nil, params = nil, headers = nil); end
  def url_prefix; end
  def url_prefix=(url, encoder = nil); end
  def use(*args, &block); end
  def with_uri_credentials(uri); end
  extend Forwardable
end
class Faraday::RackBuilder
  def ==(other); end
  def [](idx); end
  def adapter(klass = nil, *args, &block); end
  def adapter_set?; end
  def app; end
  def assert_index(index); end
  def build(options = nil); end
  def build_env(connection, request); end
  def build_response(connection, request); end
  def delete(handler); end
  def dup; end
  def handlers; end
  def handlers=(arg0); end
  def initialize(handlers = nil, adapter = nil, &block); end
  def insert(index, *args, &block); end
  def insert_after(index, *args, &block); end
  def insert_before(index, *args, &block); end
  def is_adapter?(klass); end
  def lock!; end
  def locked?; end
  def raise_if_adapter(klass); end
  def raise_if_locked; end
  def request(key, *args, &block); end
  def response(key, *args, &block); end
  def swap(index, *args, &block); end
  def to_app; end
  def use(klass, *args, &block); end
  def use_symbol(mod, key, *args, &block); end
end
class Faraday::RackBuilder::StackLocked < RuntimeError
end
class Faraday::RackBuilder::Handler
  def ==(other); end
  def build(app = nil); end
  def initialize(klass, *args, &block); end
  def inspect; end
  def klass; end
  def name; end
end
class Faraday::Middleware
  def close; end
  def initialize(app = nil); end
  extend Faraday::DependencyLoader
  extend Faraday::MiddlewareRegistry
end
class Faraday::Adapter
  def call(env); end
  def close; end
  def connection(env); end
  def initialize(_app = nil, opts = nil, &block); end
  def request_timeout(type, options); end
  def save_response(env, status, body, headers = nil, reason_phrase = nil); end
  extend Faraday::Adapter::Parallelism
  extend Faraday::AutoloadHelper
  extend Faraday::DependencyLoader
  extend Faraday::MiddlewareRegistry
end
module Faraday::Adapter::Parallelism
  def inherited(subclass); end
  def supports_parallel=(arg0); end
  def supports_parallel?; end
end
class Anonymous_Struct_6 < Struct
  def body; end
  def body=(_); end
  def headers; end
  def headers=(_); end
  def method; end
  def method=(_); end
  def options; end
  def options=(_); end
  def params; end
  def params=(_); end
  def path; end
  def path=(_); end
  def self.[](*arg0); end
  def self.members; end
  def self.new(*arg0); end
end
class Faraday::Request < Anonymous_Struct_6
  def [](key); end
  def []=(key, value); end
  def headers=(hash); end
  def marshal_dump; end
  def marshal_load(serialised); end
  def params=(hash); end
  def self.create(request_method); end
  def to_env(connection); end
  def url(path, params = nil); end
  extend Faraday::AutoloadHelper
  extend Faraday::MiddlewareRegistry
end
class Faraday::Response
  def [](*args, &block); end
  def apply_request(request_env); end
  def body; end
  def env; end
  def finish(env); end
  def finished?; end
  def headers; end
  def initialize(env = nil); end
  def marshal_dump; end
  def marshal_load(env); end
  def on_complete(&block); end
  def reason_phrase; end
  def status; end
  def success?; end
  def to_hash; end
  extend Faraday::AutoloadHelper
  extend Faraday::MiddlewareRegistry
  extend Forwardable
end
class Faraday::Response::Middleware < Faraday::Middleware
  def call(env); end
  def on_complete(env); end
end
class Faraday::Error < StandardError
  def backtrace; end
  def exc_msg_and_response!(exc, response = nil); end
  def exc_msg_and_response(exc, response = nil); end
  def initialize(exc, response = nil); end
  def inspect; end
  def response; end
  def wrapped_exception; end
end
class Faraday::ClientError < Faraday::Error
end
class Faraday::BadRequestError < Faraday::ClientError
end
class Faraday::UnauthorizedError < Faraday::ClientError
end
class Faraday::ForbiddenError < Faraday::ClientError
end
class Faraday::ResourceNotFound < Faraday::ClientError
end
class Faraday::ProxyAuthError < Faraday::ClientError
end
class Faraday::ConflictError < Faraday::ClientError
end
class Faraday::UnprocessableEntityError < Faraday::ClientError
end
class Faraday::ServerError < Faraday::Error
end
class Faraday::TimeoutError < Faraday::ServerError
  def initialize(exc = nil, response = nil); end
end
class Faraday::NilStatusError < Faraday::ServerError
  def initialize(exc, response = nil); end
end
class Faraday::ConnectionFailed < Faraday::Error
end
class Faraday::SSLError < Faraday::Error
end
class Faraday::ParsingError < Faraday::Error
end
class Faraday::RetriableResponse < Faraday::Error
end
class Faraday::CompositeReadIO
  def advance_io; end
  def close; end
  def current_io; end
  def ensure_open_and_readable; end
  def initialize(*parts); end
  def length; end
  def read(length = nil, outbuf = nil); end
  def rewind; end
end
class Faraday::ParamPart
  def content_id; end
  def content_type; end
  def headers; end
  def initialize(value, content_type, content_id = nil); end
  def to_part(boundary, key); end
  def value; end
end
module Faraday::AutoloadHelper
  def all_loaded_constants; end
  def autoload_all(prefix, options); end
  def load_autoloaded_constants; end
end
