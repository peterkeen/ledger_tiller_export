# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/jwt/all/jwt.rbi
#
# jwt-2.2.1

module JWT
end
class JWT::EncodeError < StandardError
end
class JWT::DecodeError < StandardError
end
class JWT::RequiredDependencyError < StandardError
end
class JWT::VerificationError < JWT::DecodeError
end
class JWT::ExpiredSignature < JWT::DecodeError
end
class JWT::IncorrectAlgorithm < JWT::DecodeError
end
class JWT::ImmatureSignature < JWT::DecodeError
end
class JWT::InvalidIssuerError < JWT::DecodeError
end
class JWT::InvalidIatError < JWT::DecodeError
end
class JWT::InvalidAudError < JWT::DecodeError
end
class JWT::InvalidSubError < JWT::DecodeError
end
class JWT::InvalidJtiError < JWT::DecodeError
end
class JWT::InvalidPayload < JWT::DecodeError
end
class JWT::JWKError < JWT::DecodeError
end
class JWT::ClaimsValidator
  def initialize(payload); end
  def validate!; end
  def validate_int_claims; end
  def validate_is_int(claim); end
end
module JWT::JWK
end
class JWT::JWK::RSA
  def export; end
  def initialize(keypair); end
  def keypair; end
  def kid; end
  def private?(*args, &block); end
  def public_key(*args, &block); end
  def self.import(jwk_data); end
  extend Forwardable
end
class JWT::JWK::KeyFinder
  def find_key(kid); end
  def initialize(options); end
  def jwks; end
  def key_for(kid); end
  def load_keys(opts = nil); end
  def reloadable?; end
  def resolve_key(kid); end
end
